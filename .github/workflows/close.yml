name: "‚è∞ Auto Close Inactive Items"

on:
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
  issues: write
  pull-requests: write
  discussions: write

jobs:
  close-inactive-items:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4 to use Node.js 20

      - name: Close inactive issues, pull requests, and discussions
        uses: actions/github-script@v7 # Ensure we are using the latest stable version
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();

            console.log(`Owner: ${owner}, Repo: ${repo}`);
            console.log(`Closing items inactive since: ${thirtyDaysAgo}`);

            // Close inactive issues
            try {
              const issues = await github.paginate(github.rest.issues.listForRepo, {
                owner: owner,
                repo: repo,
                state: 'open',
              });

              console.log(`Found ${issues.length} open issues`);

              for (const issue of issues) {
                if (!issue.pull_request && new Date(issue.updated_at) < new Date(thirtyDaysAgo)) {
                  await github.rest.issues.update({
                    owner: owner,
                    repo: repo,
                    issue_number: issue.number,
                    state: 'closed',
                  });
                  console.log(`Closed issue #${issue.number}`);
                }
              }
            } catch (error) {
              console.error("Error closing inactive issues:", error);
            }

            // Close inactive pull requests
            try {
              const pullRequests = await github.paginate(github.rest.pulls.list, {
                owner: owner,
                repo: repo,
                state: 'open',
              });

              console.log(`Found ${pullRequests.length} open pull requests`);

              for (const pr of pullRequests) {
                if (new Date(pr.updated_at) < new Date(thirtyDaysAgo)) {
                  await github.rest.pulls.update({
                    owner: owner,
                    repo: repo,
                    pull_number: pr.number,
                    state: 'closed',
                  });
                  console.log(`Closed pull request #${pr.number}`);
                }
              }
            } catch (error) {
              console.error("Error closing inactive pull requests:", error);
            }

            // Close inactive discussions
            try {
              const discussions = await github.paginate('GET /repos/{owner}/{repo}/discussions', {
                owner: owner,
                repo: repo,
                state: 'open',
              });

              console.log(`Found ${discussions.length} open discussions`);

              for (const discussion of discussions) {
                if (new Date(discussion.updated_at) < new Date(thirtyDaysAgo)) {
                  await github.request('PATCH /repos/{owner}/{repo}/discussions/{discussion_number}', {
                    owner: owner,
                    repo: repo,
                    discussion_number: discussion.number,
                    state: 'closed',
                  });
                  console.log(`Closed discussion #${discussion.number}`);
                }
              }
            } catch (error) {
              console.error("Error closing inactive discussions:", error);
            }
